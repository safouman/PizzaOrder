{"version":3,"sources":["queries/pizzaSizeByName.js","components/ToppingSelection.js","queries/pizzaList.js","components/PizzaList.js","components/Cart.js","components/App.js","serviceWorker.js","index.js"],"names":["gql","_templateObject","ToppingSelection","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Toppings","selectTopping","bind","assertThisInitialized","renderToppings","isDisabled","onSubmit","nextProps","data","loading","setDefaultToppings","toppings","pizzaSizeByName","defaultToppings","map","_ref","defaultSelected","topping","push","name","price","checked","setState","event","currenttoppings","_ref2","target","value","i","length","splice","_this2","_ref3","react_default","a","createElement","key","className","type","id","onChange","disabled","isChecked","style","display","flexDirection","justifyContent","for","filter","item","maxToppings","e","preventDefault","pizza","selected","concat","Component","graphql","options","variables","pizzaList_templateObject","PizzaList","pizzaSizes","basePrice","onClick","setSelected","toUpperCase","renderPizzas","entries","pizzaListQuery","Cart","Total","priceCalculator","pizzas","j","deletePizza","cursor","onDelete","App","setPizza","currentPizzas","_this$state","components_Cart","components_PizzaList","components_ToppingSelection","Boolean","window","location","hostname","match","cache","InMemoryCache","link","HttpLink","uri","opts","mode","client","ApolloClient","ReactDOM","render","react_apollo_esm","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.272de0f3.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport default gql`\n    query pizzaSizeByname($name: PizzaSizes) {\n        pizzaSizeByName(name: $name) {\n            maxToppings\n            toppings {\n                defaultSelected\n                topping {\n                    name\n                    price\n                }\n            }\n        }\n    }\n`;\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport pizzaSizeByName from '../queries/pizzaSizeByName';\n\nclass ToppingSelection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            Toppings: []\n        };\n        this.selectTopping = this.selectTopping.bind(this);\n        this.renderToppings = this.renderToppings.bind(this);\n        this.isDisabled = this.isDisabled.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    componentWillReceiveProps(nextProps) {\n        if (!nextProps.data.loading) {\n            this.setDefaultToppings(nextProps);\n        }\n    }\n    componentDidMount() {\n        if (!this.props.data.loading) {\n            this.setDefaultToppings(this.props);\n        }\n    }\n    setDefaultToppings(props) {\n        const { toppings } = props.data.pizzaSizeByName;\n        let defaultToppings = [];\n\n        toppings.map(({ defaultSelected, topping }) => {\n            if (defaultSelected) {\n                defaultToppings.push({\n                    name: topping.name,\n                    price: topping.price,\n                    checked: defaultSelected\n                });\n            }\n        });\n\n        this.setState({ Toppings: defaultToppings });\n    }\n    selectTopping(event) {\n        if (!this.props.data.loading && this.props.data.pizzaSizeByName) {\n            const { toppings } = this.props.data.pizzaSizeByName;\n            let currenttoppings = this.state.Toppings;\n            toppings.map(({ topping }) => {\n                if (\n                    topping.name === event.target.value &&\n                    event.target.checked\n                ) {\n                    return currenttoppings.push({\n                        name: topping.name,\n                        price: topping.price,\n                        checked: event.target.checked\n                    });\n                }\n                if (\n                    topping.name === event.target.value &&\n                    !event.target.checked\n                ) {\n                    for (let i = 0; i < currenttoppings.length; i++) {\n                        if (\n                            currenttoppings[i].name === event.target.value &&\n                            !event.target.checked\n                        ) {\n                            currenttoppings.splice(i, 1);\n                        }\n                    }\n                }\n            });\n\n            this.setState({ Toppings: currenttoppings });\n        }\n    }\n\n    renderToppings() {\n        const { toppings } = this.props.data.pizzaSizeByName;\n        return toppings.map(({ defaultSelected, topping }) => {\n            return (\n                <div key={topping.name}>\n                    <li className=\"collection-item\">\n                        <input\n                            type=\"checkbox\"\n                            id={topping.name}\n                            value={topping.name}\n                            onChange={this.selectTopping}\n                            disabled={this.isDisabled(topping.name)}\n                            checked={this.isChecked(topping.name)}\n                        />\n                        <label\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'row',\n                                justifyContent: 'space-between'\n                            }}\n                            for={topping.name}\n                        >\n                            <div>{topping.name}</div>\n                            <div>{topping.price} $</div>\n                        </label>\n                    </li>\n                </div>\n            );\n        });\n    }\n    isChecked(id) {\n        return this.state.Toppings.filter(item => item.name === id).length === 0\n            ? false\n            : true;\n    }\n    isDisabled(id) {\n        const { maxToppings } = this.props.data.pizzaSizeByName;\n\n        if (maxToppings === null) {\n            return false;\n        } else {\n            return (\n                this.state.Toppings.length > maxToppings - 1 &&\n                this.state.Toppings.filter(item => item.name === id).length ===\n                    0\n            );\n        }\n    }\n    onSubmit(e) {\n        e.preventDefault();\n        let pizza = {\n            pizza: this.props.selected,\n            toppings: this.state.Toppings\n        };\n        this.props.onSubmit(pizza);\n        this.setDefaultToppings(this.props);\n    }\n    render() {\n        const { selected } = this.props;\n\n        if (selected === {}) {\n            return <div />;\n        }\n        if (this.props.data.loading) {\n            return <div>Loading Toppings</div>;\n        } else {\n            const { maxToppings } = this.props.data.pizzaSizeByName;\n            return (\n                <div>\n                    <h5>\n                        {maxToppings !== null\n                            ? `Select up to ${maxToppings} Toppings`\n                            : 'Unlimited Toppings Selection'}\n                        <form onSubmit={this.onSubmit}>\n                            <ul className=\"collection\">\n                                {this.renderToppings()}\n                            </ul>\n                            <button className=\"btn\">Add Pizza</button>\n                        </form>\n                    </h5>\n                </div>\n            );\n        }\n    }\n}\n\nexport default graphql(pizzaSizeByName, {\n    options: props => {\n        return { variables: { name: props.selected.name } };\n    }\n})(ToppingSelection);\n","import gql from 'graphql-tag';\n\nexport default gql`\n    {\n        pizzaSizes {\n            name\n\n            basePrice\n        }\n    }\n`;\n","import React, { Component } from 'react';\nimport pizzaListQuery from '../queries/pizzaList';\n\nimport { graphql } from 'react-apollo';\n\nclass PizzaList extends Component {\n    renderPizzas() {\n        const { pizzaSizes } = this.props.data;\n        return pizzaSizes.map(({ basePrice, name }) => {\n            return (\n                <li\n                    onClick={() => {\n                        this.props.setSelected({\n                            name: name.toUpperCase(),\n                            basePrice\n                        });\n                    }}\n                    className=\"collection-item\"\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        justifyContent: 'space-between'\n                    }}\n                    key={name}\n                >\n                    <p> {name} </p>\n                    <p>{basePrice}$</p>\n                </li>\n            );\n        });\n    }\n    render() {\n        const { loading } = this.props.data;\n\n        if (loading) {\n            return <div> Loading Pizzas ..</div>;\n        }\n        return (\n            <div>\n                <h5> Select a Pizza</h5>\n                <ul className=\"collection\">{this.renderPizzas()}</ul>\n                {Object.entries(this.props.selected).length > 0 && (\n                    <h5>\n                        {' '}\n                        Selected Pizza: {this.props.selected.name}{' '}\n                        {this.props.selected.basePrice} $\n                    </h5>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default graphql(pizzaListQuery)(PizzaList);\n","import React, { Component } from 'react';\n\nclass Cart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            Total: 0\n        };\n        this.priceCalculator = this.priceCalculator.bind(this);\n    }\n    priceCalculator() {\n        const { pizzas } = this.props;\n\n        var Total = 0;\n        for (let i = 0; i < pizzas.length; i++) {\n            Total = Total + pizzas[i].pizza.basePrice;\n\n            for (let j = 0; j < pizzas[i].toppings.length; j++) {\n                Total = Total + pizzas[i].toppings[j].price;\n            }\n        }\n\n        this.setState({ Total });\n    }\n    componentWillReceiveProps(props) {\n        this.priceCalculator();\n    }\n    onDelete(i) {\n        this.props.deletePizza(i);\n    }\n    renderPizzas() {\n        const { pizzas } = this.props;\n        return pizzas.map(({ pizza, toppings }, i) => {\n            return (\n                <li key={i} className=\"collection-item\">\n                    <div>\n                        <ul className=\"collection\">\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    justifyContent: 'space-between'\n                                }}\n                            >\n                                {pizza.name} X {pizza.basePrice} $\n                                <i\n                                    style={{ cursor: 'pointer' }}\n                                    className=\"material-icons \"\n                                    onClick={() => this.onDelete(i)}\n                                >\n                                    delete\n                                </i>\n                            </div>\n                            {toppings.map((item, i) => {\n                                return (\n                                    <li key={i} className=\"collection-item\">\n                                        {item.name} X {item.price} $\n                                    </li>\n                                );\n                            })}{' '}\n                        </ul>\n                    </div>\n                </li>\n            );\n        });\n    }\n    render() {\n        const { pizzas } = this.props;\n\n        return (\n            <div>\n                <h5>Cart</h5>\n                {pizzas.length === 0 ? (\n                    <ul className=\"collection\">\n                        <li className=\"collection-item\">\n                            <p> Add your Pizzas and they will appear here</p>\n                        </li>\n                    </ul>\n                ) : (\n                    <ul className=\"collection\">{this.renderPizzas()}</ul>\n                )}\n                <h5> Total : {this.state.Total} $</h5>\n            </div>\n        );\n    }\n}\nexport default Cart;\n","import React, { Component } from 'react';\nimport ToppingSelection from './ToppingSelection';\nimport PizzaList from './PizzaList';\nimport Cart from './Cart';\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: {},\n            pizzas: []\n        };\n        this.setSelected = this.setSelected.bind(this);\n        this.setPizza = this.setPizza.bind(this);\n        this.deletePizza = this.deletePizza.bind(this);\n    }\n    deletePizza(i) {\n        let pizzas = this.state.pizzas;\n\n        if (i > -1) {\n            pizzas.splice(i, 1);\n        }\n        this.setState({ pizzas });\n    }\n    setSelected(selected) {\n        this.setState({\n            selected: selected\n        });\n    }\n    setPizza(pizza) {\n        let currentPizzas = this.state.pizzas;\n        currentPizzas.push(pizza);\n        this.setState({ pizzas: currentPizzas, selected: {} });\n    }\n    render() {\n        const { selected, pizzas } = this.state;\n\n        return (\n            <div className=\"container\">\n                <h4>This is a pizza order page</h4>\n                <div>\n                    <Cart pizzas={pizzas} deletePizza={this.deletePizza} />\n                    <PizzaList\n                        selected={selected}\n                        setSelected={this.setSelected}\n                    />\n                    {Object.entries(selected).length > 0 && (\n                        <ToppingSelection\n                            onSubmit={this.setPizza}\n                            selected={selected}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-client';\nimport { ApolloProvider } from 'react-apollo';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n    uri: 'https://core-graphql.dev.waldo.photos/pizza',\n    opts: {\n        mode: 'no-cors'\n    }\n});\n\nconst client = new ApolloClient({\n    cache,\n    link\n});\nconst Root = () => {\n    return (\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>\n    );\n};\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}